// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/pdf/greet.proto

package pdfconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	pdf "example.com/aaa/gen/proto/pdf"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PdfServiceName is the fully-qualified name of the PdfService service.
	PdfServiceName = "pdf.PdfService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PdfServiceGetPdfProcedure is the fully-qualified name of the PdfService's GetPdf RPC.
	PdfServiceGetPdfProcedure = "/pdf.PdfService/GetPdf"
)

// PdfServiceClient is a client for the pdf.PdfService service.
type PdfServiceClient interface {
	GetPdf(context.Context, *connect.Request[pdf.PdfRequest]) (*connect.ServerStreamForClient[pdf.PdfChunk], error)
}

// NewPdfServiceClient constructs a client for the pdf.PdfService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPdfServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PdfServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	pdfServiceMethods := pdf.File_proto_pdf_greet_proto.Services().ByName("PdfService").Methods()
	return &pdfServiceClient{
		getPdf: connect.NewClient[pdf.PdfRequest, pdf.PdfChunk](
			httpClient,
			baseURL+PdfServiceGetPdfProcedure,
			connect.WithSchema(pdfServiceMethods.ByName("GetPdf")),
			connect.WithClientOptions(opts...),
		),
	}
}

// pdfServiceClient implements PdfServiceClient.
type pdfServiceClient struct {
	getPdf *connect.Client[pdf.PdfRequest, pdf.PdfChunk]
}

// GetPdf calls pdf.PdfService.GetPdf.
func (c *pdfServiceClient) GetPdf(ctx context.Context, req *connect.Request[pdf.PdfRequest]) (*connect.ServerStreamForClient[pdf.PdfChunk], error) {
	return c.getPdf.CallServerStream(ctx, req)
}

// PdfServiceHandler is an implementation of the pdf.PdfService service.
type PdfServiceHandler interface {
	GetPdf(context.Context, *connect.Request[pdf.PdfRequest], *connect.ServerStream[pdf.PdfChunk]) error
}

// NewPdfServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPdfServiceHandler(svc PdfServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pdfServiceMethods := pdf.File_proto_pdf_greet_proto.Services().ByName("PdfService").Methods()
	pdfServiceGetPdfHandler := connect.NewServerStreamHandler(
		PdfServiceGetPdfProcedure,
		svc.GetPdf,
		connect.WithSchema(pdfServiceMethods.ByName("GetPdf")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pdf.PdfService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PdfServiceGetPdfProcedure:
			pdfServiceGetPdfHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPdfServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPdfServiceHandler struct{}

func (UnimplementedPdfServiceHandler) GetPdf(context.Context, *connect.Request[pdf.PdfRequest], *connect.ServerStream[pdf.PdfChunk]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("pdf.PdfService.GetPdf is not implemented"))
}
